import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv("Salary_dataset.csv", usecols=[1, 2])


# stochastic gradient descent
# chooses singular data point per iteration
# uses the whole dataset to compute the m
def stochastic_gradient_descent(m_now, b_now, points, lr):
    m_gradient = 0
    b_gradient = 0

    n = len(points)

    random_index = np.random.randint(n)
    x = points.iloc[random_index].YearsExperience
    y = points.iloc[random_index].Salary

    # gradients of loss functions with respect to weights
    m_gradient += -(2 / n) * x * (y - (m_now * x + b_now))
    b_gradient += -(2 / n) * (y - (m_now * x + b_now))

    m = m_now - m_gradient * lr
    b = b_now - b_gradient * lr

    return m, b


# m and b and be anything
m = 0
b = 0
lr = 0.1
epochs = 100

for i in range(epochs):
    m, b = stochastic_gradient_descent(m, b, data, lr)
    print(f"epoch {i}: \t m: {m} \t b: {b}")


plt.scatter(data.YearsExperience, data.Salary, color="black")
# plots the line from regression
plt.plot(list(range(1, 11)), [m * x + b for x in range(1, 11)], color="red")
plt.title(f"Stochastic Gradient Descent {epochs} Epochs, {lr} Learning Rate")
plt.show()
